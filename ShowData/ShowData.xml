<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShowData</name>
    </assembly>
    <members>
        <member name="T:ShowData.ConfigurateSwaggerOptions">
            <summary>
            Gets data for swaggr api documentation. Gather xml comments and set them into specific windows with object type depends on models.
            </summary>
        </member>
        <member name="M:ShowData.Controllers.ProjectController.GetProjcets">
            <summary>
            Get list of Projects
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.ProjectController.GetProject(System.Int32)">
            <summary>
            Get individual Project
            </summary>
            <param name="projectId">Id of specific Project</param>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.ProjectController.CreateProject(ShowData.Model.DTO.ProjectCreateDto)">
            <summary>
            Creates a Project
            </summary>
            <param name="projectDto">Params requires to create Project</param>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.ProjectController.UpdateProject(System.Int32,ShowData.Model.DTO.ProjectUpdateDto)">
            <summary>
            Updates Project in database.
            </summary>
            <param name="projectId">Id of specific Project to update</param>
            <param name="projectDto">Required params to build Project</param>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.ProjectController.DeleteProject(System.Int32)">
            <summary>
            Deletes Project from database
            </summary>
            <param name="projectId">Id of Project to delete</param>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.ProjectV2Controller.GetProjects">
            <summary>
            Get list of ShowData model
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.taskController.Gettask(System.Int32)">
            <summary>
            Get individual task
            </summary>
            <param name="taskId">Id of specific task</param>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.taskController.Createtask(ShowData.Model.DTO.taskUpdateDto)">
            <summary>
            Creates a task
            </summary>
            <param name="taskDto">Params requires to create task</param>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.taskController.Updatetask(System.Int32,ShowData.Model.DTO.taskUpdateDto)">
            <summary>
            Updates task in database
            </summary>
            <param name="taskId">Id of specific task to update</param>
            <param name="taskDto">Required params to build task</param>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.taskController.Deletetask(System.Int32)">
            <summary>
            Deletes DataOverview from database
            </summary>
            <param name="taskId">Id of DataOverview to delete</param>
            <returns></returns>
        </member>
        <member name="M:ShowData.Controllers.UserController.Authenticate(ShowData.Model.AuthenticationDetails)">
            <summary>
            Authenticating user.
            </summary>
            <param name="userDetails">Must contain user name and password.</param>
            <returns>Http Ok if success, http bad request if fail.</returns>
        </member>
        <member name="M:ShowData.Repository.UserRepository.IsUserNameTaken(System.String)">
            <summary>
            Checks if user name is already taken.
            </summary>
            <param name="userName">String user name to check.</param>
            <returns>Bool depended if user name is taken or not.</returns>
        </member>
        <member name="M:ShowData.Repository.UserRepository.GetUsernames">
            <summary>
            Gets all usernames sorted alphabeticaly
            </summary>
        </member>
    </members>
</doc>
